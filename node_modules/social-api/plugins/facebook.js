/* Misc */
var toolset 		= require('toolset');
var _ 				= require('underscore');
var qs				= require('querystring');

var facebook_page = function(options, callback) {
	var scope = this;
	
	// Parameters
	this.options 	= _.extend({
		appid:		'',
		appsecret:	'',
		page:		'IFeakingLoveScience'
	},options);
	
	// Parse the page provided
	this.options.page = this.parseInput(this.options.page);
	
	
	// Setup
	this.url = {
		graph:	'https://graph.facebook.com'
	};
	this.authtoken	= false;
	
	
	// Init
	// Get the app token
	this.get_app_access_token(function(app_token) {
		scope.authtoken 	= app_token;
		callback(scope);
	});
}
facebook_page.prototype.get_app_access_token = function(callback) {
	
	this.graph({
		path:	'/oauth/access_token',
		data:	{
			client_id:		this.options.appid,
			client_secret:	this.options.appsecret,
			grant_type:		'client_credentials'
		}
	}, function(response) {
		var parsed		= qs.parse(response);
		if (!parsed.access_token) {
			callback(false);
			return false;
		}
		callback(parsed.access_token);
	});
	
	return this;
}
facebook_page.prototype.useAuthtoken = function(authtoken) {
	this.authtoken = authtoken;
}

facebook_page.prototype.parseInput = function(input) {
	var regexUrl 	= new RegExp('(?:(?:facebook\.[a-z.]+)|^\/)\/(?:(?!pages\/)([a-zA-Z0-9_.]+)|(?:pages\/(?:[a-zA-Z0-9-_.]+)\/([a-zA-Z0-9_.]+)))','gmi');
	var regexId		= new RegExp('([a-zA-Z0-9-_.]+)','gmi');
	var regMatch	= regexUrl.exec(input);
	
	var ID			= false;
	
	if (!_.isArray(regMatch) || regMatch[1] == null && regMatch[2] == null) {
		// Nothing with that regex, try the other one.
		var regMatch	= regexId.exec(input);
		ID				= regMatch[0];
	} else {
		if (regMatch[1] == null && regMatch[2] != null) {
			ID				= regMatch[2];
		}
		if (regMatch[1] != null && regMatch[2] == null) {
			ID				= regMatch[1];
		}
	}
	
	return ID;
}
facebook_page.prototype.graph = function(params, callback) {
	
	var url = this.url.graph+params.path+"?"+qs.stringify(params.data);
	if (this.authtoken===false && params.auth === true) {
		callback({
			error:		true,
			message:	"You didn't provide an authtoken. Provide an authtoken or set the auth parameter to false."
		});
		return this;
	}
	if (params.auth === true) {
		url += "&authtoken="+this.authtoken;
	}
	if (params.auth && params.auth !== false) {
		url += "&access_token="+params.auth;
	}
	
	toolset.file.read(url,  function(response) {
		if (response === false) {
			callback({
				error:		true,
				message:	url+" returned an error."
			});
			return false;
		}
		try {
			response = JSON.parse(response);
		} catch (e) {}
		callback(response);
	});
	
	return this;
}
facebook_page.prototype.data = function(fields, callback) {
	var scope = this;
	
	var data = {};
	
	var stack = new toolset.stack();
	
	// Download the original data
	stack.add(function(p, cb) {
		scope.graph({
			path:	'/'+scope.options.page,
			data:	{
				fields:	fields || 'username,about,posts,bio,category,cover,description,description_html,directed_by,general_info,personal_info,hometown,company_overview,culinary_team,hours,location,restaurant_services,website,schedule,record_label,name,phone,mission,parking,events.fields(description,location,id,name,owner,end_time,timezone,venue,start_time,privacy,cover),videos.fields(source,picture,id,name,embed_html,format,from,description,created_time,updated_time),albums.fields(count,cover_photo,name,photos.fields(created_time,picture,name,source,height,width,link,images).limit(5))'
			},
			auth:	scope.authtoken
		}, function(response) {
			
			if (response === false) {
				callback(false);
			} else {
				data = response;
				cb();
			}
		})
	});
	
	stack.process(function() {
		callback(data);
	});
	
	return this;
}

// List the pages
facebook_page.prototype.list = function(callback) {
	var scope = this;
	
	scope.graph({
		path:	'/me/accounts',
		data:	{
			
		},
		auth:	scope.options.authtoken
	}, function(response) {
		if (response && response.data) {
			callback(response.data);
		} else {
			callback(false);
		}
		
	});
	
	return this;
}
facebook_page.prototype.getPageData = function(params, callback) {
	var scope = this;
	
	params = _.extend({
		albumPages:	3
	}, params);
	
	var data = {};
	
	var stack = new toolset.stack();
	
	// Download the original data
	stack.add(function(p, cb) {
		scope.graph({
			path:	'/'+params.objectID,
			data:	{
				fields:	'username,about,albums.fields(count,cover_photo,name,comments,photos.fields(created_time,picture,name,source,height,width,link,images).limit(5)),posts,bio,category,cover,description,description_html,directed_by,general_info,personal_info,hometown,company_overview,culinary_team,hours,location,restaurant_services,website,schedule,record_label,name,phone,mission,parking,events.fields(description,location,id,name,owner,end_time,timezone,venue,start_time,privacy,cover),videos.fields(source,picture,id,name,embed_html,format,from,description,created_time,updated_time)'
			},
			auth:	params.app_token
		}, function(response) {
			
			if (response === false) {
				callback(false);
			} else {
				data = response;
				cb();
			}
		})
	});
	
	stack.process(function() {
		callback(data);
	});
	
	return this;
}








var facebook_profile = function() {
	this.url = {
		graph:	'https://graph.facebook.com'
	};
	this.authtoken	= false;
}








module.exports = {
	profile:	facebook_profile,
	page:		facebook_page
};